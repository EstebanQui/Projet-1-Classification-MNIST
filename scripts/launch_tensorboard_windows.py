#!/usr/bin/env python3
"""
Script de lancement TensorBoard optimis√© pour Windows
R√©sout les probl√®mes de PATH et de plugins dupliqu√©s
"""

import os
import sys
import subprocess
import webbrowser
import time
import threading
from pathlib import Path

def find_tensorboard_executable():
    """
    Trouve l'ex√©cutable TensorBoard sur Windows
    """
    possible_paths = [
        # Chemin standard apr√®s installation pip
        os.path.expanduser("~/AppData/Roaming/Python/Python313/Scripts/tensorboard.exe"),
        os.path.expanduser("~/AppData/Local/Programs/Python/Python313/Scripts/tensorboard.exe"),
        # Chemin syst√®me
        "C:/Python313/Scripts/tensorboard.exe",
        "C:/Python312/Scripts/tensorboard.exe",
        "C:/Python311/Scripts/tensorboard.exe",
        # Chemin conda
        os.path.expanduser("~/anaconda3/Scripts/tensorboard.exe"),
        os.path.expanduser("~/miniconda3/Scripts/tensorboard.exe"),
    ]
    
    for path in possible_paths:
        if os.path.exists(path):
            print(f"‚úÖ TensorBoard trouv√©: {path}")
            return path
    
    # Essayer via Python
    try:
        result = subprocess.run([
            sys.executable, "-c", 
            "import tensorboard; print(tensorboard.__file__)"
        ], capture_output=True, text=True, timeout=10)
        
        if result.returncode == 0:
            print("‚úÖ TensorBoard disponible via Python")
            return "python"
    except:
        pass
    
    print("‚ùå TensorBoard non trouv√©")
    return None

def launch_tensorboard_simple(log_dir="runs", port=6006):
    """
    Lance TensorBoard avec une approche simplifi√©e
    """
    print(f"üöÄ Lancement de TensorBoard...")
    print(f"üìÅ Dossier de logs: {os.path.abspath(log_dir)}")
    print(f"üåê Port: {port}")
    
    # V√©rifier que le dossier de logs existe
    if not os.path.exists(log_dir):
        print(f"‚ùå Dossier de logs introuvable: {log_dir}")
        return False
    
    # V√©rifier qu'il y a des logs
    log_files = list(Path(log_dir).glob("*"))
    if not log_files:
        print(f"‚ùå Aucun fichier de log trouv√© dans {log_dir}")
        return False
    
    print(f"üìä {len(log_files)} exp√©riences trouv√©es")
    
    # Trouver l'ex√©cutable TensorBoard
    tb_executable = find_tensorboard_executable()
    if not tb_executable:
        print("‚ùå TensorBoard non trouv√©. Installation: pip install tensorflow")
        return False
    
    # Pr√©parer la commande
    if tb_executable == "python":
        cmd = [
            sys.executable, "-m", "tensorboard.main",
            "--logdir", log_dir,
            "--port", str(port),
            "--bind_all", "false"
        ]
    else:
        cmd = [
            tb_executable,
            "--logdir", log_dir,
            "--port", str(port),
            "--bind_all", "false"
        ]
    
    print(f"üöÄ Commande: {' '.join(cmd)}")
    
    try:
        # Lancer TensorBoard
        process = subprocess.Popen(
            cmd,
            stdout=subprocess.PIPE,
            stderr=subprocess.PIPE,
            text=True
        )
        
        # Attendre que le processus d√©marre
        time.sleep(3)
        
        # V√©rifier si le processus fonctionne
        if process.poll() is None:
            print("‚úÖ TensorBoard d√©marr√© avec succ√®s!")
            
            # Attendre un peu plus pour que le serveur soit pr√™t
            time.sleep(2)
            
            # Ouvrir le navigateur
            url = f"http://localhost:{port}"
            print(f"üåê Ouverture de {url}...")
            
            try:
                webbrowser.open(url)
                print("‚úÖ Navigateur ouvert!")
            except Exception as e:
                print(f"‚ö†Ô∏è Impossible d'ouvrir le navigateur: {e}")
                print(f"Ouvrez manuellement: {url}")
            
            print("\n" + "="*50)
            print("üìä TENSORBOARD ACTIF")
            print("="*50)
            print(f"URL: {url}")
            print("Pour arr√™ter: Ctrl+C")
            print("="*50)
            
            # Attendre que l'utilisateur arr√™te
            try:
                process.wait()
            except KeyboardInterrupt:
                print("\nüõë Arr√™t de TensorBoard...")
                process.terminate()
                process.wait()
                print("‚úÖ TensorBoard arr√™t√©")
            
            return True
        else:
            stdout, stderr = process.communicate()
            print(f"‚ùå Erreur TensorBoard:")
            print(f"STDOUT: {stdout}")
            print(f"STDERR: {stderr}")
            return False
            
    except Exception as e:
        print(f"‚ùå Erreur: {e}")
        return False

def launch_alternative_method(log_dir="runs", port=6006):
    """
    M√©thode alternative utilisant un serveur HTTP simple
    """
    print("üîÑ Tentative avec m√©thode alternative...")
    
    try:
        # Cr√©er un serveur HTTP simple pour afficher les logs
        import http.server
        import socketserver
        
        class CustomHandler(http.server.SimpleHTTPRequestHandler):
            def __init__(self, *args, **kwargs):
                super().__init__(*args, directory=log_dir, **kwargs)
        
        with socketserver.TCPServer(("", port), CustomHandler) as httpd:
            print(f"‚úÖ Serveur HTTP d√©marr√© sur le port {port}")
            print(f"üåê URL: http://localhost:{port}")
            
            # Ouvrir le navigateur
            webbrowser.open(f"http://localhost:{port}")
            
            print("üìÅ Affichage des fichiers de logs TensorBoard")
            print("üõë Pour arr√™ter: Ctrl+C")
            
            try:
                httpd.serve_forever()
            except KeyboardInterrupt:
                print("\nüõë Arr√™t du serveur...")
                httpd.shutdown()
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erreur serveur HTTP: {e}")
        return False

def main():
    """
    Fonction principale
    """
    print("üöÄ LANCEUR TENSORBOARD WINDOWS")
    print("=" * 50)
    
    # V√©rifier l'installation
    try:
        import tensorboard
        print("‚úÖ TensorBoard install√©")
    except ImportError:
        print("‚ùå TensorBoard non install√©")
        print("Installation: pip install tensorflow")
        return False
    
    # Lister les exp√©riences
    log_dir = "runs"
    if os.path.exists(log_dir):
        experiments = [d for d in os.listdir(log_dir) if os.path.isdir(os.path.join(log_dir, d))]
        if experiments:
            print(f"üìÅ Exp√©riences trouv√©es: {len(experiments)}")
            for exp in experiments[:3]:  # Afficher les 3 premi√®res
                print(f"   üî¨ {exp}")
            if len(experiments) > 3:
                print(f"   ... et {len(experiments) - 3} autres")
        else:
            print("‚ö†Ô∏è Aucune exp√©rience trouv√©e")
    else:
        print("‚ö†Ô∏è Dossier runs/ non trouv√©")
    
    print("-" * 50)
    
    # Essayer le lancement principal
    if launch_tensorboard_simple(log_dir, 6006):
        return True
    
    # Si √ßa √©choue, essayer la m√©thode alternative
    print("\nüîÑ Tentative avec m√©thode alternative...")
    return launch_alternative_method(log_dir, 6006)

if __name__ == "__main__":
    success = main()
    if not success:
        print("\nüí° SOLUTIONS ALTERNATIVES:")
        print("1. Ouvrez un terminal en tant qu'administrateur")
        print("2. Essayez: pip install --upgrade tensorflow")
        print("3. Utilisez: python -m tensorboard.main --logdir=runs --port=6006")
        print("4. Ou lancez la d√©monstration: python scripts/demo_tensorboard.py")
    
    input("\nAppuyez sur Entr√©e pour quitter...") 