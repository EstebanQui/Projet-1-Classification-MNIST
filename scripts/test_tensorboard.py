#!/usr/bin/env python3
"""
Script de test pour v√©rifier l'int√©gration TensorBoard
G√©n√®re des donn√©es de d√©monstration pour tester les visualisations
"""

import torch
import torch.nn as nn
import torch.optim as optim
from torch.utils.tensorboard import SummaryWriter
import numpy as np
import os
from datetime import datetime
import time

def create_dummy_model():
    """
    Cr√©e un mod√®le factice pour les tests
    """
    class DummyModel(nn.Module):
        def __init__(self):
            super(DummyModel, self).__init__()
            self.fc1 = nn.Linear(784, 128)
            self.fc2 = nn.Linear(128, 64)
            self.fc3 = nn.Linear(64, 10)
            self.dropout = nn.Dropout(0.5)
            
        def forward(self, x):
            x = x.view(-1, 784)
            x = torch.relu(self.fc1(x))
            x = self.dropout(x)
            x = torch.relu(self.fc2(x))
            x = self.dropout(x)
            x = self.fc3(x)
            return x
    
    return DummyModel()

def generate_dummy_data():
    """
    G√©n√®re des donn√©es factices pour les tests
    """
    # Donn√©es d'entra√Ænement factices
    train_data = torch.randn(1000, 1, 28, 28)
    train_labels = torch.randint(0, 10, (1000,))
    
    # Donn√©es de test factices
    test_data = torch.randn(200, 1, 28, 28)
    test_labels = torch.randint(0, 10, (200,))
    
    return train_data, train_labels, test_data, test_labels

def test_tensorboard_integration():
    """
    Test complet de l'int√©gration TensorBoard
    """
    print("üß™ TEST D'INT√âGRATION TENSORBOARD")
    print("=" * 50)
    
    # V√©rifier l'installation de TensorBoard
    try:
        from torch.utils.tensorboard import SummaryWriter
        print("‚úÖ TensorBoard import√© avec succ√®s")
    except ImportError as e:
        print(f"‚ùå Erreur d'import TensorBoard: {e}")
        print("Installation: pip install tensorboard")
        return False
    
    # Cr√©er le dossier de logs
    log_dir = f"runs/test_experiment_{datetime.now().strftime('%Y%m%d_%H%M%S')}"
    os.makedirs(log_dir, exist_ok=True)
    
    # Initialiser TensorBoard
    try:
        writer = SummaryWriter(log_dir)
        print(f"‚úÖ Writer TensorBoard cr√©√©: {log_dir}")
    except Exception as e:
        print(f"‚ùå Erreur cr√©ation writer: {e}")
        return False
    
    # Cr√©er le mod√®le et les donn√©es
    model = create_dummy_model()
    train_data, train_labels, test_data, test_labels = generate_dummy_data()
    
    # Composants d'entra√Ænement
    criterion = nn.CrossEntropyLoss()
    optimizer = optim.Adam(model.parameters(), lr=0.001)
    
    print("üöÄ D√©marrage du test d'entra√Ænement factice...")
    
    # Simulation d'entra√Ænement
    num_epochs = 5
    global_step = 0
    
    for epoch in range(num_epochs):
        print(f"üìä √âpoque {epoch+1}/{num_epochs}")
        
        # Mode entra√Ænement
        model.train()
        train_loss = 0.0
        train_correct = 0
        train_total = 0
        
        # Simulation de batches
        num_batches = 10
        for batch in range(num_batches):
            # Donn√©es factices
            batch_data = train_data[batch*100:(batch+1)*100]
            batch_labels = train_labels[batch*100:(batch+1)*100]
            
            # Forward pass
            optimizer.zero_grad()
            outputs = model(batch_data)
            loss = criterion(outputs, batch_labels)
            
            # Backward pass
            loss.backward()
            optimizer.step()
            
            # Statistiques
            train_loss += loss.item()
            _, predicted = outputs.max(1)
            train_total += batch_labels.size(0)
            train_correct += predicted.eq(batch_labels).sum().item()
            
            # Log TensorBoard
            if batch % 2 == 0:  # Log tous les 2 batches
                writer.add_scalar('Test/Batch_Loss', loss.item(), global_step)
                batch_accuracy = 100. * predicted.eq(batch_labels).sum().item() / batch_labels.size(0)
                writer.add_scalar('Test/Batch_Accuracy', batch_accuracy, global_step)
                
                # Log des gradients
                for name, param in model.named_parameters():
                    if param.grad is not None:
                        writer.add_histogram(f'Test/Gradients/{name}', param.grad, global_step)
            
            global_step += 1
        
        # M√©triques d'√©poque
        epoch_train_loss = train_loss / num_batches
        epoch_train_accuracy = 100. * train_correct / train_total
        
        # √âvaluation factice
        model.eval()
        with torch.no_grad():
            test_outputs = model(test_data)
            test_loss = criterion(test_outputs, test_labels)
            _, test_predicted = test_outputs.max(1)
            test_accuracy = 100. * test_predicted.eq(test_labels).sum().item() / test_labels.size(0)
        
        # Log des m√©triques d'√©poque
        writer.add_scalar('Test/Epoch_Train_Loss', epoch_train_loss, epoch)
        writer.add_scalar('Test/Epoch_Train_Accuracy', epoch_train_accuracy, epoch)
        writer.add_scalar('Test/Epoch_Test_Loss', test_loss.item(), epoch)
        writer.add_scalar('Test/Epoch_Test_Accuracy', test_accuracy, epoch)
        writer.add_scalar('Test/Train_Test_Diff', abs(epoch_train_accuracy - test_accuracy), epoch)
        
        # Log des param√®tres
        for name, param in model.named_parameters():
            writer.add_histogram(f'Test/Parameters/{name}', param.data, epoch)
        
        print(f"   Train - Loss: {epoch_train_loss:.4f} | Acc: {epoch_train_accuracy:.2f}%")
        print(f"   Test  - Loss: {test_loss.item():.4f} | Acc: {test_accuracy:.2f}%")
    
    # Log final
    writer.add_text('Test/Summary', 
                   f"Test d'int√©gration TensorBoard termin√©\n"
                   f"√âpoques: {num_epochs}\n"
                   f"Logs g√©n√©r√©s: {log_dir}\n"
                   f"Timestamp: {datetime.now().isoformat()}", 0)
    
    # Ajouter quelques images factices
    try:
        dummy_images = torch.randn(16, 1, 28, 28)  # 16 images factices
        writer.add_images('Test/Sample_Images', dummy_images, 0)
        print("‚úÖ Images factices ajout√©es")
    except Exception as e:
        print(f"‚ö†Ô∏è Erreur ajout images: {e}")
    
    writer.close()
    
    print(f"‚úÖ Test termin√© avec succ√®s!")
    print(f"üìÅ Logs g√©n√©r√©s: {log_dir}")
    print(f"üìä M√©triques logg√©es:")
    print(f"   - Loss et Accuracy par batch")
    print(f"   - M√©triques par √©poque")
    print(f"   - Histogrammes des param√®tres")
    print(f"   - Distribution des gradients")
    print(f"   - Images d'exemple")
    
    return True, log_dir

def verify_log_files(log_dir):
    """
    V√©rifie que les fichiers de log ont √©t√© cr√©√©s
    """
    print(f"\nüîç V√âRIFICATION DES FICHIERS DE LOG")
    print("-" * 30)
    
    if not os.path.exists(log_dir):
        print(f"‚ùå Dossier de logs introuvable: {log_dir}")
        return False
    
    # Lister les fichiers
    files = os.listdir(log_dir)
    event_files = [f for f in files if f.startswith('events.out.tfevents')]
    
    print(f"üìÅ Dossier: {log_dir}")
    print(f"üìÑ Fichiers trouv√©s: {len(files)}")
    print(f"üìä Fichiers d'√©v√©nements: {len(event_files)}")
    
    if event_files:
        print("‚úÖ Fichiers TensorBoard cr√©√©s avec succ√®s")
        for file in event_files:
            file_path = os.path.join(log_dir, file)
            file_size = os.path.getsize(file_path)
            print(f"   üìÑ {file} ({file_size} bytes)")
        return True
    else:
        print("‚ùå Aucun fichier d'√©v√©nement trouv√©")
        return False

def main():
    """
    Fonction principale du test
    """
    print("üß™ D√âMARRAGE DU TEST TENSORBOARD")
    print("=" * 50)
    
    # Cr√©er le dossier runs s'il n'existe pas
    os.makedirs("runs", exist_ok=True)
    
    # Ex√©cuter le test
    success, log_dir = test_tensorboard_integration()
    
    if success:
        # V√©rifier les fichiers
        verify_log_files(log_dir)
        
        print("\n" + "="*50)
        print("üéâ TEST R√âUSSI!")
        print("="*50)
        print("Pour visualiser les r√©sultats:")
        print(f"1. Lancez: tensorboard --logdir=runs")
        print(f"2. Ouvrez: http://localhost:6006")
        print(f"3. Cherchez l'exp√©rience: {os.path.basename(log_dir)}")
        
        return True
    else:
        print("\n" + "="*50)
        print("‚ùå TEST √âCHOU√â!")
        print("="*50)
        print("V√©rifiez:")
        print("1. Installation de TensorBoard: pip install tensorboard")
        print("2. Permissions d'√©criture dans le dossier runs/")
        print("3. Espace disque disponible")
        
        return False

if __name__ == "__main__":
    success = main()
    exit(0 if success else 1) 